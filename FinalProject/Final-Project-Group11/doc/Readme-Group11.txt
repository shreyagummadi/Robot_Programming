# ENPM809Y_Group11: Introduction to Robot Programming 
# Final Project: OOP, Inheritance, and Dynamic Polymorphism


Project Statement
========
We are tasked to develop a project using object-oriented programming, inheritance, and dynamic polymorphism. The prject will be used to drive one of the two robots (wheeled or tracked) in a maze, to reach the goal location which is located at the center of the maze. 


The project is currently hosted on GitHub:

https://github.com/sully892/Cu_Ag_Au/Final-Project-Group11


Files
========
 
There is one file for this project:
	Final-Project-Group11.zip

The program consists of the following code files:

main.cpp
landbasedrobot.h
landbasedrobot.cpp
landbasedtracked.h
landbasedtracked.cpp
landbasedwheeled.h
landbasedwheeled.cpp
algorithm.h
algorithm.cpp
api.h
api.cpp
byte.h
direction.h
maze.h
maze.cpp


Overview
========

* There are two types of robots with different driving mechanism and characteristics: Wheeled vs Tracked.

* The Ô¨Årst robot belongs to the C++ class LandBasedWheeled, which is a derived concrete class.

* The second robot belongs to the C++ class LandBasedTracked, which is a derived concrete class.

* Both classes derive from the base class LandBasedRobot, which is an abstract base class.


To install Micromouse simulator:
------
	- git clone https://github.com/mackorone/mms
	- cd mms/src 
	- qmake && make

To launch Mircormouse simulator:
------
	- ./bin/mms


To download collection of maze files:
------
	- git clone https://github.com/micromouseonline/mazefiles.git

To add maze in simulator:
------
	-User input in address path to the maze and selects one	in the config maze"


Program Output
------

* Generate path from current position (S)(0,0) to the center of the maze (G)(7,7;7,8;8,7;8,8)
* After a path is found and generated
		-Using down, right, up, left sequence
* A robot will follow the path using the function
		-After each turn of the robot the function MoveFoward needs to be called.
* Micromouse simulator will be used to display the robot simulation on the screen.
* Program exits when
		*Robot reaches G. 
		*There is no solution from S to G.


To run the file:
------

	-Step 1: Extract and open the workspace in any IDE. 
		*The zip file might contains adjacent files, make sure to that the workspace is stored in one common file. eg: /home/controls/ENPM809Y/Workspace/FinalProject
		for the code to run. Otherwise. specify the location address in the code and configure simulation mouse input.

	-Step 2: User input in the Micromouse Simulator (Config: Mouse) the following:

		* Name: FinalProject
		* Directory: eg: /home/controls/ENPM809Y/Workspace/Final-Project-Group11/Final-Project-Group11/src
		(if directory does not work is because the file is store in a different location or the name of your machine was not added in the directory path)
		* Build command: g++ API/api.cpp LandBasedRobot/landbasedrobot.cpp LandBasedTracked/landbasedtracked.cpp LandBasedWheeled/landbasedwheeled.cpp Maze/maze.cpp Algorithm/algorithm.cpp ../main.cpp
		* Run Command: ./a.out

	-Step 3: User input in address path to the maze (Config: Maze) and selects one

		* eg: /home/controls/ENPM809Y/Workspace/Final-Project-Group11/mazefiles/classic/50.txt
		(if address path does not work is because the file is store in a different location or the name of your machine was not added in the address path)

	-Step 4: Click Build

	-Step 5: Click Run

	-Step 6: You are able to use speed bar, Pause, cancel and Reset buttons when the program is running.

Maze:
------

* All maze have the same dimensions 16 x 16 cells with a peremeter around it making it [0,15]x[0,15]
* The robot has not previous knowledge of any wall including the perimeter walls.
		-Walls are discovered only when robot tries to drive through a wall
* All of the maze have the same goal at the center with coordinates (7,7;7,8;8,7;8,8).




Robot:
-----

* Robot will be selected from Wheeled:Husky vs Tracked:LT2-F
* Robot will always start at position (0,0), facing north.

Micromouse Simulator:
-----

The micromouse simulator (https://github.com/mackorone/mms) is a small C ++ QT simulator that allows you to visualize path planning
algorithms.

* Generates maze, Add walls and Visualize maze
		1. see robot move
		2. walls being added in the maze
		3. show the path generated by search algorithm
			-interact using build-in methods from mms project with class API


